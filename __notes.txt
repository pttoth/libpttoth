-----------------------------------------------------------
bool Config::
        _isValidChar(char c) const{
    char* valids = "_-./";
    if( isalnum(c) ){ return true; } //A-Z, a-z, 0-9
    for(size_t i=0; i<strlen(valids); ++i){
        if( c == valids[i] ){ return true; }
    }
    return false;
}
-----------------------------------------------------------
bool Config::
        _isValidChar(char c) const{
    char* valids = "_-./";
	
	size_t len = strlen(valids); 						<----------avoid multiple calls
    
	if( isalnum(c) ){ return true; } //A-Z, a-z, 0-9
    for(size_t i=0; i<len; ++i){
        if( c == valids[i] ){ return true; }
    }
    return false;
}
--------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------
Config:
	rename _isValidChar to _isValidCharForFilename or _isValidPathChar
	add getC and setC functions (gets and sets Chars)
		(needed for key mappings in config)

--------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------
event:
/**
     * @brief Removes all function registrations regarding the object received as parameter
     *   Note: this will remove any parent's member functions as well,
     *   which we may not know about
     * @param object: listener, whose every registered funcion should be removed
     * @throws std::invalid_argument
     */
-----------------------------------------------------------
	 *   which the caller may not know about
--------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------
Tuple
	try c++17 flag in the compiler for class template deduction
	another workaround for earlier c++ is that you write a creator function for the class
		c++ deduces function templates already
	

--------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------